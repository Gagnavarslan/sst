The standard actions
====================

Tests comprise of python scripts in a "tests" directory. Files whose names
begin with an underscore will *not* be executed as test scripts.

Test scripts drive the browser through selenium by importing and using
actions.

The standard set of actions are imported by starting the test scripts with::

    from funcrunner.actions import *


Actions that work on page elements usually take either an element id or an
element object as their first argument. If the element you are working with
doesn't have a specific id you can get the element object with the
`get_element` action. `get_element` allows you to find an element by its
tagname, text, class or other attributes. See the `get_element` documentation.



start
-----

::
    start()

Starts Firefox with a new browser session. Called for you at the start of
each test script.


stop
----

::
    stop()

Stops Firefox and ends the browser session. Called automatically for you at
the end of each test script.


title_is
--------

::
    title_is(title)

Assert the page title is as specified.


title_contains
--------------

::
    title_contains(title)

Assert the page title containts the specified text.


goto
----

::
    goto(url='')

Goto a specific URL. If the url provided is a relative url it will be added
to the base url. You can change the base url for the test with
`set_base_url`.


waitfor
-------

::
    waitfor(condition, msg='', timeout=5, poll=0.10000000000000001)

Wait for an action to pass. Useful for checking the results of actions that
may take some time to complete. This action takes a condition function
and calls it until it returns True. The maximum amount of time it will wait
is specified as the timeout (default 5 seconds). The function is called at
intervals specified by the poll argument (default every 0.1 seconds).

If it fails, the condition function never returns True before the timeout,
then any msg you supply will be added to the failure message.

An example action using waitfor::

    def wait_for_title_to_change(title):
        def title_changed():
            return browser.title == title

        waitfor(title_changed, 'title to change')

XXXX Note that test scripts shouldn't use the browser object directly,
so if waitfor is to be used in test scripts (instead of for building
actions) it should be changed to catch assertion errors instead of condition
functions that return True or False.



fails
-----

::
    fails(action, *args, **kwargs)

This action is particularly useful for *testing* other actions, by
checking that they fail when they should do. `fails` takes a function
(usually an action) and any arguments and keyword arguments to call the
function with. If calling the function raises an AssertionError then
`fails` succeeds. If the function does *not* raise an AssertionError then
this action raises the appropriate failure exception. Alll other
exceptions will be propagated normally.


url_is
------

::
    url_is(url)

Assert the current url is as specified. Can be an absolute url or
    relative to the base url.


is_radio
--------

::
    is_radio(the_id)

Assert the specified element is a radio button


set_base_url
------------

::
    set_base_url(url)

Set the url used for relative arguments to the `goto` action.


reset_base_url
--------------

::
    reset_base_url()

Restore the base url to the default. This is called automatically for
you when a test script completes.


radio_value_is
--------------

::
    radio_value_is(the_id, value)

Assert the specified element is a radio button with the specified value;
    True for selected and False for unselected.


radio_select
------------

::
    radio_select(the_id)

Select the specified radio button.


text_is
-------

::
    text_is(the_id, text)

Assert the specified element has the specified text.


is_checkbox
-----------

::
    is_checkbox(the_id)

Assert that the element is a checkbox. Takes an id or an element object.
Raises a failure exception if the element specified doesn't exist or isn't
a checkbox.


get_element
-----------

::
    get_element(tag=None, css_class=None, id=None, text=None, **kwargs)

This function will find and return an element by any of several
attributes. If the element cannot be found from the attributes you
provide, or the attributes match more than one element, the call will fail
with an exception.

Finding elements is useful for checking that the element exists, and also
for passing to other actions that work with element objects.

You can specify as many or as few attributes as you like, so long as they
uniquely identify one element.


checkbox_value_is
-----------------

::
    checkbox_value_is(chk_name, value)

Assert checkbox value. Takes an element id or object plus either True or
False. Raises a failure exception if the element specified doesn't exist
or isn't a checkbox.


checkbox_toggle
---------------

::
    checkbox_toggle(chk_name)

Toggle the checkbox value. Takes an element id or object. Raises a failure
exception if the element specified doesn't exist or isn't a checkbox.


checkbox_set
------------

::
    checkbox_set(chk_name, new_value)

Set a checkbox to a specific value, either True or False. Raises a failure
exception if the element specified doesn't exist or isn't a checkbox.


is_link
-------

::
    is_link(the_id)

Assert that the element is a link.


is_button
---------

::
    is_button(the_id)

Assert that the specified element is a button.


button_click
------------

::
    button_click(the_id)

Click the specified button.


link_click
----------

::
    link_click(the_id, check=False)

Click the specified link. As some links do redirects the location you end
up at is not checked by default. If you pass in `check=True` then this
action asserts that the resulting url is the link url.


is_textfield
------------

::
    is_textfield(the_id)

Assert that the element is a textfield, textarea or password box. Takes an
id or an element object. Raises a failure exception if the element
specified doesn't exist or isn't a textfield.


textfield_write
---------------

::
    textfield_write(the_id, new_text, check=True)

Set the specified text into the textfield. If the text fails to write (the
textfield contents after writing are different to the specified text) this
function will fail. You can switch off the checking by passing
`check=False`.


url_contains
------------

::
    url_contains(url)

Assert the current url contains the specified text.


sleep
-----

sleep(seconds)

Delay execution for a given number of seconds.  The argument may be
a floating point number for subsecond precision.


is_select
---------

::
    is_select(the_id)

Assert the specified element is a select drop-list


select_value_is
---------------

::
    select_value_is(the_id, text_in)

Assert the specified element is a select list with the specified value


set_select
----------

::
    set_select(the_id, text_in)

Set the select drop list to a text value provided to the function


get_link_url
------------

::
    get_link_url(the_id)

Return the URL from a link.


