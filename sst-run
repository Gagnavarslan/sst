#!/usr/bin/env python
#
#   Copyright (c) 2011 Canonical Ltd.
#
#   This file is part of: SST (selenium-simple-test)
#   https://launchpad.net/selenium-simple-test
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#


import optparse
import os
import shutil
import subprocess
import sys
import time
import urllib

try:
    import selenium
except ImportError as e:
    print 'Error importing Selenium WebDriver.  Selenium 2.x python bindings are required.'
    print e
    sys.exit(1)

try:
    # installed
    import sst
except ImportError:
    # from the development directory
    this_dir = os.path.abspath(os.path.dirname(__file__))
    sys.path.append(os.path.join(this_dir, 'src'))
    import sst


usage = """Usage: %prog [testname]

- Calling %prog without any arguments runs all tests in
the local 'test' directory.

- Calling %prog with testname(s) as arguments will just run
those tests. The testnames should not include the '.py' at
the end of the filename.

- You may optionally create a data file for data-driven
testing.  Create a '^' delimited txt data file with the same
name as the test, plus the '.csv' extension.  This will
run a test using each row in the data file (1st row of data
file is variable name mapping)
"""



def main():
    (cmd_opts, args) = get_opts()
    
    clear_old_results()
    
    if cmd_opts.quiet:
        from sst import actions
        actions.VERBOSE = False
    
    if cmd_opts.xserver_headless:
        from pyvirtualdisplay import Display
        print '\nstarting virtual display...'
        display = Display(visible=0, size=(1024, 768))
        display.start()

    if cmd_opts.run_tests:
        cmd_opts.dir_name = 'selftests'
        run_django()

    print '----------------------------------------------------------------------'

    sst.runtests(
        args,
        test_dir=cmd_opts.dir_name,
        report_format=cmd_opts.report_format,
        browser_type=cmd_opts.browser_type,
        javascript_disabled=cmd_opts.javascript_disabled,
        shared_directory=cmd_opts.shared_modules,
        screenshots_on=cmd_opts.screenshots_on,
        failfast=cmd_opts.failfast,
    )

    print '----------------------------------------------------------------------'

    if cmd_opts.run_tests:
        print '\nkilling django...'
        os.system("kill $(ps aux | grep 'manage.py' | awk '{print $2}')")

    if cmd_opts.xserver_headless:
        print '\nstopping virtual display...\n'
        display.stop()



def clear_old_results():
    try:
        shutil.rmtree('./results/')
    except OSError:
        pass



def run_django():
    subprocess.Popen(['./src/testproject/manage.py', 'runserver'],
        stderr=open(os.devnull, 'w'),
        stdout=open(os.devnull, 'w')
        )
    print '----------------------------------------------------------------------'
    print 'waiting for django to come up...'
    while True:
        try:
            resp = urllib.urlopen('http://localhost:8000/')
            if resp.code == 200:
                break
        except IOError:
            time.sleep(0.2)
    print 'django found. continuing...'
    return



def get_opts():
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('-d', dest='dir_name',
                      default='tests',
                      help='directory of test case files')
    parser.add_option('-r', dest='report_format',
                      default='console',
                      help='results report format (html, xml, console)')
    parser.add_option('-b', dest='browser_type',
                      default='Firefox',
                      help='select webdriver (Firefox, Chrome, InternetExplorer, etc)')
    parser.add_option('-j', dest='javascript_disabled',
                      default=False, action='store_true',
                      help='disable javascript in browser')
    parser.add_option('-x', dest='xserver_headless',
                      default=False, action='store_true',
                      help='run tests in headless xserver')
    parser.add_option('-m', dest='shared_modules',
                      default=None,
                      help='directory for shared modules')
    parser.add_option('-q', dest='quiet', action='store_true',
                      default=False,
                      help='output less debugging info during test run')
    parser.add_option('-s', dest='screenshots_on', action='store_true',
                      default=False,
                      help='save screenshots on failures')
    parser.add_option('--test',
                      dest='run_tests', action='store_true',
                      default=False,
                      help='run selftests')
    parser.add_option('--failfast',
                      action='store_true', default=False,
                      help="stop test execution after first failure")
    (cmd_opts, args) = parser.parse_args()
    return (cmd_opts, args)



if __name__ == '__main__':
    main()
